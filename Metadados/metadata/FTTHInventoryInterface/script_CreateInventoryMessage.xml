<?xml version="1.0" encoding="UTF-8" ?>
<script name="FTTHInventoryInterface.CreateInventoryMessage">
  <label>Create Inventory Message</label>
  <metaVersion>3</metaVersion>
  <parameterList>
    <parameter name="order" type="rifp">
      <mandatory>true</mandatory>
      <type>order_FTTHOrder.FTTHOrder</type>
    </parameter>
    <parameter name="processID" type="rifp">
      <mandatory>true</mandatory>
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="atividade" type="rifp">
      <mandatory>true</mandatory>
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="output" type="rifp"/>
    <parameter name="cancelUpdateEquipment" type="rifp">
      <type>dtype_com.conceptwave.system.Boolean</type>
    </parameter>
    <parameter name="flgEquipToRemove" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="nSerial" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="idAtivo" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="codEquipamento" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
    <parameter name="equipAction" type="rifp">
      <type>dtype_com.conceptwave.system.String</type>
    </parameter>
  </parameterList>
  <script><![CDATA[
    /*
    Monta mensagens para envio ao Inventario

    parametros:
    order          (this.process.processOrder)           ordem vinda do OM -->                      tipo FTTHOrder.FTTHOrder
    processID      (this.process.id)                     transacao no OM                            tipo string
    atividade:          funcao a ser acionada no NetWin                                                  tipo string
    DESIGNAR_FACILIDADE,                 designar facilidades
    REDESIGNAR_FACILIDADE,               alterar combos, endereco, planos
    LIBERAR_FACILIDADE,                  cancelar servico do cliente
    UPDATECPE                            update de CPE e dados equipo durante etapa de instalacao
    UPDATE                               update de dados equipo durante etapa de instalacao
    CONFIRMAR_DESIGNACAO                 envio de confirmacao ao inventario
    CANCELAR_DESIGNACAO                  cancelamento da operação que está sendo executada
    output        (this.activityData)        pode ser request ou query
    */

    //Parametros de LOG
    var LOG_INTERFACE = "INVENTORY";
    var LOG_NIVEL = Global.getConfigVariable('NIVEL_LOG_INVENTORY');
    var LOG_ACTIVITY = atividade;
    var LOG_SCRIPT = "CreateInventoryMessage";
    var LOG_OPERATION = "Sender";
    var qtdMaterial = 0;
    var qtdEquip    = 0;
    var qtdIdAtivo  = 0;
    var possuiTodosAtributosObrigatorios = true;
    var msgCamposSemvalor = 'Campo(s) obrigatório(s) sem valor => ';

    output.correlationId = processID;
    output.messageId = order.id;
    output.sendDate = Calendar.parseDate(Calendar.formatDate(new Date(), 'yyyy-MM-dd\'T\'HH:mm:ss'), 'yyyy-MM-dd\'T\'HH:mm:ss');
    output.operation = atividade;
    output.actor.sistema = "OM-R";

    var searchAttributes = new Document('FTTHInventoryInterface:AttributeInventory');
    searchAttributes.operacao = atividade;
    searchAttributes.idOS = order.id;

    var conjoinedOps = FTTHInventoryInterface.getConjoinedOperations(order.id);

    var attributesList;

    if(conjoinedOps){
        attributesList = new DataObjectList();
        for(var i=0; i<conjoinedOps.length; i++){
            searchAttributes.tipoSolicitacao = conjoinedOps[i];
            var tempList = Finder.runSearch('FTTHInventoryInterface:AttributeFinderConjoined', searchAttributes);
            if(tempList.size > 0)
                attributesList.concatenate(tempList);
        }
    }else
    attributesList = Finder.runSearch('FTTHInventoryInterface:AttributeFinder', searchAttributes);

    /********* CR Id Endereço Inventário **************************************/
    /*
    * PRJ11255 - 01/07/2017 - marcossouza@
    quando passado o último parametro, havera o remapeamento do envio dos dados originais e novos
    */
    attributesList = validateAddressAttributes(attributesList, order, cancelUpdateEquipment)

    /******************************************************************************/
    var attributes = new DataObjectList();
    if(attributesList && attributesList.size > 0)
    {
        attributes.addLast(attributesList[0]);
        var enviarDadoOriginal;
        for(var i = 1; i < attributesList.size; i++)
        {
            var add = true;
            for(var j = 0; j < attributes.size; j++)
            {
                //remapping se tiver cancelando a inserção/remoção de um equipamento
                enviarDadoOriginal = doRemapping(cancelUpdateEquipment, attributesList[i].enviarDadoOriginal);
                //attributesList[i].enviarDadoOriginal = enviarDadoOriginal;
                if(attributes[j].nomeDocumento == attributesList[i].nomeDocumento
                    && attributes[j].identificadorCampo == attributesList[i].identificadorCampo
                && attributes[j].obrigatoriedade == attributesList[i].obrigatoriedade
                && attributes[j].enviarDadoOriginal == enviarDadoOriginal//attributesList[i].enviarDadoOriginal
                && attributes[j].tipoAcao == attributesList[i].tipoAcao
                && attributes[j].tipoAtributo == attributesList[i].tipoAtributo)
            {
                add = false;
                break;
            }
            }
            if(add)
                attributes.addLast(attributesList[i])
        }
    }

    for(var j = 0; j < attributes.size; j++){
        if(attributes[j].tipoAcao)
            if(attributes[j].tipoAcao.indexOf("/")!=-1){
                var splits = attributes[j].tipoAcao.split("/");
                var changedServiceFinder = new Document("FTTHOrderManagementInterface.ChangedServiceSearch");
                changedServiceFinder.service = attributes[j].identificadorCampo;
                changedServiceFinder.cwOrderId = order.OrderHeader.cwOrderId;
                var rslt = Finder.runSearch('FTTHOrderManagementInterface.ChangedServiceFinder', changedServiceFinder);
                if(rslt.size > 0){
                    attributes[j].tipoAcao = splits[0];
                }else{
                    attributes[j].tipoAcao = splits[1];
                }
            }
    }

    if (attributes) {
        var listaAtributos = new Array();
        for (var i = 0; i < attributes.size; i++) {
            var atributo = new DataStructure('FTTHInventoryInterface.attributeType');
            var attribute = attributes[i];
            var valor = null;
            var valorOriginal = null;
            var indCancelamento = FTTHCommon.isCancelOrder(order.OrderHeader.cwOrderId);

            //cancelUpdateEquipment break
            if(attribute.enviarDadoOriginal == 0 || attribute.enviarDadoOriginal == 1){
                try {
                    var enviaDadosOriginais = attribute.enviarDadoOriginal;

                    enviaDadosOriginais = doRemapping( (indCancelamento || cancelUpdateEquipment) , enviaDadosOriginais);
                    /*
                    if(indCancelamento || cancelUpdateEquipment) {
                        if(attribute.enviarDadoOriginal == 0) {
                            enviaDadosOriginais = 1;
    } else if(attribute.enviarDadoOriginal == 1) {
        enviaDadosOriginais = 0;
    }
    }
    */
    var documento = FTTHCommon.getDocument(order, attribute.nomeDocumento, enviaDadosOriginais);

    if(documento.isCollection){
        for(var k = 0; k < documento.length; k++){
            var doc = FTTHCommon.getDocument(order, attribute.nomeDocumento, enviaDadosOriginais, k);
            valor = doc.getValueByName(attribute.identificadorCampo);
            fieldAttributeMsg(valor, atributo, attribute);
            if(k != documento.length - 1 && atributo.value !== null){
                listaAtributos[listaAtributos.length] = atributo;
                atributo = new DataStructure('FTTHInventoryInterface.attributeType')
            }
        }
    }else{
        valor = documento.getValueByName(attribute.identificadorCampo);
        fieldAttributeMsg(valor, atributo, attribute);
    }
                } catch (e) {
                    valor = null;
                    if(attribute.obrigatoriedade){
                        possuiTodosAtributosObrigatorios = false;
                        msgCamposSemvalor = msgCamposSemvalor + '[value][' + attribute.nomeDocumento + ']' + '[' + attribute.identificadorCampo + '][indDadoOriginal]['+attribute.enviarDadoOriginal+']\n';
                    }
                    FTTHCommon.log( order.id, processID,
                    LOG_ACTIVITY, LOG_OPERATION, LOG_SCRIPT,
                    "Erro ao preencher campo => " + e, -1,
                    LOG_INTERFACE, LOG_NIVEL, "ERROR" );
                }
            }else if(attribute.enviarDadoOriginal == 2){
                try {
                    var documento = FTTHCommon.getDocument(order, attribute.nomeDocumento, false);
                    if(documento != null){
                        valor = documento.getValueByName(attribute.identificadorCampo);
                    }
                    var documentoOriginal = FTTHCommon.getDocument(order, attribute.nomeDocumento, true);
                    if(documentoOriginal != null){
                        valorOriginal = documentoOriginal.getValueByName(attribute.identificadorCampo);
                    }
                    if(valor != null || valorOriginal != null){
                        atributo.name = attribute.identificadorCampo;
                        atributo.action = attribute.tipoAcao;
                        atributo.type = attribute.tipoAtributo;
                        atributo.value = (valor != null ? valor : valorOriginal);
                        if(valorOriginal != null && valor != null){
                            atributo.originalValue = valorOriginal;
                        }
                    }else{
                        FTTHCommon.log( order.id, processID, LOG_ACTIVITY, LOG_OPERATION, LOG_SCRIPT,
                        "Campo e campo original sem valor => attribute.identificadorCampo:" + attribute.identificadorCampo, -1,
                        LOG_INTERFACE, LOG_NIVEL, "ERROR" );
                        if(attribute.obrigatoriedade){
                            msgCamposSemvalor = msgCamposSemvalor + '[value][' + attribute.nomeDocumento + ']' + '[' + attribute.identificadorCampo + '][indDadoOriginal]['+attribute.enviarDadoOriginal+']\n';
                            possuiTodosAtributosObrigatorios = false;
                        }
                    }
                } catch (e) {
                    valor = null;
                    valorOriginal = null;
                    if(attribute.obrigatoriedade){
                        possuiTodosAtributosObrigatorios = false;
                        msgCamposSemvalor = msgCamposSemvalor + '[value][' + attribute.nomeDocumento + ']' + '[' + attribute.identificadorCampo + '][indDadoOriginal]['+attribute.enviarDadoOriginal+']\n';
                    }
                    FTTHCommon.log( order.id, processID, LOG_ACTIVITY, LOG_OPERATION, LOG_SCRIPT, "Erro ao preencher campo  => " + e, -1, LOG_INTERFACE, LOG_NIVEL, "ERROR" );
                }
            }
            if(atributo.value != null)
                listaAtributos[listaAtributos.length] = atributo;
        }
    }else{
        possuiTodosAtributosObrigatorios = false;
        msgCamposSemvalor = "Nao existem atributos cadastrados para a operacao " + atividade;
        FTTHCommon.log(order.id, processID, LOG_ACTIVITY, LOG_OPERATION, LOG_SCRIPT,
        "Nao existem atributos cadastrados para a operacao => searchAttributes:: " + searchAttributes.toXML(), -1,
        LOG_INTERFACE, LOG_NIVEL, "ERROR" );
    }




    var isReparo = false;

    var ops = new Document('FTTHOrderManagementInterface:OrderParametersSearch');
    ops.cwOrderId = order.OrderHeader.cwOrderId;

    var orderRequest = Finder.runSearch('FTTHOrderManagementInterface:OrderRequestFinder', ops);

    if (orderRequest.size > 0) {
        for (var i = 0; i < orderRequest.size; i++) {
            var solicitacao = orderRequest[i];

            if(solicitacao.tipoOrdemServico == "TIPO_ORDEM_REPARO"){
                isReparo = true;
            }
        }
    }







    if(possuiTodosAtributosObrigatorios) {
        var nElementsRemoved = 0;
        for(i = 0; i < listaAtributos.length; i++){

            /*
            * PRJ11255#17
            * PRJ11255#36
            * PRJ21262#113
            * marcossouza@br.ibm.com
            * accd@br.ibm.com
            * bsilva@br.ibm.com
            *
            */
            if(flgEquipToRemove){
                var isSTB = false;
                var fieldsToBeRemoved = [];
                switch(flgEquipToRemove){
                    case 'ONT':
                    fieldsToBeRemoved.push('numeroSerieHomeGateway', 'numeroSerieSetTopBox', 'idAtivo', 'codEquipamentoHGW');
                    break;

                    case 'HGW':
                    fieldsToBeRemoved.push('numeroSerieONT', 'numeroSerieSetTopBox', 'idAtivo', 'codEquipamento');
                    break;

                    default:
                    isSTB = true;
                    fieldsToBeRemoved.push('numeroSerieONT','numeroSerieHomeGateway', 'codEquipamentoHGW');
                }

                //PRJ17683#97 - show stopper - codMaterial mapeado erroneamente para Troca CPE/Reparo
                if(isReparo && (listaAtributos[i].name == 'codMaterial' || listaAtributos[i].name.indexOf('codEquipamento') > -1)){

                    if (listaAtributos[i].name.indexOf('codEquipamento') > -1) {
                        listaAtributos[i].name = 'codMaterial';
                        qtdMaterial++;
                    }

                    if(qtdMaterial < 2){
                    output.attributeList.attribute[i-nElementsRemoved].name =  listaAtributos[i].name;
                    output.attributeList.attribute[i-nElementsRemoved].value = codEquipamento;
                    output.attributeList.attribute[i-nElementsRemoved].action = listaAtributos[i].action;
                    output.attributeList.attribute[i-nElementsRemoved].type = listaAtributos[i].type;

                    } else{
                        nElementsRemoved++;
                    }
                //16/04/2018 - adicionando verificação da qtd de idAtivo e de numeros de Serie, para o envio de apenas 1
                } else if((fieldsToBeRemoved.indexOf(listaAtributos[i].name) > -1) ||
                          (isSTB && idAtivo && idAtivo != listaAtributos[i].value && listaAtributos[i].name == 'idAtivo')||
                          ((codEquipamento && codEquipamento != listaAtributos[i].value && listaAtributos[i].name.indexOf('codEquipamento') >  -1) && !isReparo)||
                          (isSTB && nSerial && listaAtributos[i].name == 'numeroSerieSetTopBox' && nSerial != listaAtributos[i].value) ||
                    (qtdMaterial > 0 && listaAtributos[i].name.indexOf('codEquipamento') >  -1) || (isSTB && !idAtivo && listaAtributos[i].name == 'idAtivo')||
                    (qtdIdAtivo > 0 && listaAtributos[i].name.indexOf('idAtivo') > -1) || (qtdEquip > 0 && listaAtributos[i].name.indexOf('numeroSerie') > -1)) {

                    nElementsRemoved++;

                } else{

                    if (listaAtributos[i].name.indexOf('codEquipamento') > -1) {
                        listaAtributos[i].name = 'codMaterial';
                        qtdMaterial++;
                    }

                    if(listaAtributos[i].name.indexOf('idAtivo') > -1){
                        qtdIdAtivo++;
                    }

                    if(listaAtributos[i].name.indexOf('numeroSerie') > -1){
                        qtdEquip++;
                    }
                //end 16/04/2018
                    output.attributeList.attribute[i-nElementsRemoved].name =  listaAtributos[i].name;
                    output.attributeList.attribute[i-nElementsRemoved].value = listaAtributos[i].value;
                    output.attributeList.attribute[i-nElementsRemoved].action = listaAtributos[i].action;
                    output.attributeList.attribute[i-nElementsRemoved].type = listaAtributos[i].type;

                }
            } else{

                output.attributeList.attribute[i].name = listaAtributos[i].name;
                output.attributeList.attribute[i].value = listaAtributos[i].value;
                output.attributeList.attribute[i].action = listaAtributos[i].action;
                output.attributeList.attribute[i].type = listaAtributos[i].type;

            }
            //end MS
        }

        //MS - marcossouza@br.ibm.com - Adição de campos obrigatórios que não foram adicionados - 10/11/2017
        var fieldToCheck = null;
        //04/04/2018
        switch(flgEquipToRemove){
            case 'ONT':
            fieldToCheck = 'numeroSerieONT';
                checkRequiredFieldsExist(output.attributeList.attribute, fieldToCheck, nElementsRemoved, nSerial);

                //fieldToCheck = 'codEquipamento';
                fieldToCheck = 'codMaterial';
                checkRequiredFieldsExist(output.attributeList.attribute, fieldToCheck, nElementsRemoved, codEquipamento);
            break;

            case 'HGW':
            fieldToCheck = 'numeroSerieHomeGateway';
                checkRequiredFieldsExist(output.attributeList.attribute, fieldToCheck, nElementsRemoved, nSerial);

                //fieldToCheck = 'codEquipamentoHGW';
                fieldToCheck = 'codMaterial';
                checkRequiredFieldsExist(output.attributeList.attribute, fieldToCheck, nElementsRemoved, codEquipamento);
            break;

            case 'STB':
            fieldToCheck = 'numeroSerieSetTopBox';
                checkRequiredFieldsExist(output.attributeList.attribute, fieldToCheck, nElementsRemoved, nSerial);

                //fieldToCheck = 'codEquipamento';
                fieldToCheck = 'codMaterial';
                checkRequiredFieldsExist(output.attributeList.attribute, fieldToCheck, nElementsRemoved, codEquipamento);
           break;
        }
        //end MS
        //end 04/04/2018
    }
    else{
        FTTHCommon.log(order.id, processID, LOG_ACTIVITY, LOG_OPERATION, LOG_SCRIPT,
        msgCamposSemvalor, -1, LOG_INTERFACE, LOG_NIVEL, "ERROR" );


        var activityCodeDoc = new Document('FTTHCommon:NomeAtividadeQuery');
        activityCodeDoc.atividade = atividade;

        var result = Finder.runSearch('FTTHCommon:ActivityCodeFinder', activityCodeDoc);

        var activityCode;
        if(result && result.size != 0){
            activityCode = result[0].atividade;
        }else{
            activityCode = atividade;
        }
        FTTHCommon.saveEvent(order.id,
        Global.getConfigVariable("INVENTORY_SYSTEM"),
        activityCode,
        "FUNCTIONAL_ERROR",
        -1000,
        msgCamposSemvalor,
        processID,
        Global.getConfigVariable("ASYNC_REQUEST"));

        FTTHCommon.updateAutomaticActivityDocument(order, Global.getConfigVariable("INVENTORY_SYSTEM"), activityCode);

    }
    return output;

    /******************** FUNCTIONS **************************/

    function fieldAttributeMsg(valor, atributo, attribute){
        if(valor != null){
            atributo.name = attribute.identificadorCampo;
            atributo.value = valor;
            atributo.action = attribute.tipoAcao;
            atributo.type = attribute.tipoAtributo;
        }else{
            FTTHCommon.log( order.id, processID, LOG_ACTIVITY, LOG_OPERATION, LOG_SCRIPT,
            "Campo sem valor => attribute.identificadorCampo::" + attribute.identificadorCampo + " :: attribute.enviarDadoOriginal::" + attribute.enviarDadoOriginal, -1,
            LOG_INTERFACE, LOG_NIVEL, "WARN" );
            if(attribute.obrigatoriedade){
                msgCamposSemvalor = msgCamposSemvalor + '[value][' + attribute.nomeDocumento + ']' + '[' + attribute.identificadorCampo + '][indDadoOriginal]['+attribute.enviarDadoOriginal+']\n';
                possuiTodosAtributosObrigatorios = false;
            }
        }
    }

    function validateAddressAttributes(attributesList, order, cancelUpdateEquipment){
        var addressAtributeNotInclude = new DataObjectList();
        var checkId = false;

        var enviarDadoOriginal;
        for(var i = 0; i < attributesList.length; i++){
            if(attributesList[i].identificadorCampo == 'idEndereco'){
                enviarDadoOriginal = doRemapping(cancelUpdateEquipment, attributesList[i].enviarDadoOriginal);

                var doc = FTTHCommon.getDocument(order,"Facility Data", enviarDadoOriginal);
                if(doc.getValueByName(attributesList[i].identificadorCampo) != null){
                    checkId = true;
                }else{
                    break;
                }
            }
            if(attributesList[i].tipoAtributo != 'ADDR'){
                addressAtributeNotInclude.addLast(attributesList[i]);
            }
        }

        if(checkId){
            return addressAtributeNotInclude;
        }
        return attributesList;
    }

    function doRemapping(cancelUpdateEquipment, enviarDadoOriginal){
        if(cancelUpdateEquipment){
            return remapOriginalData(enviarDadoOriginal);
        }
        return enviarDadoOriginal;
    }

    function remapOriginalData(enviarDadoOriginal){
        if(enviarDadoOriginal == 0) {
            return 1;
        } else if(enviarDadoOriginal == 1) {
            return 0;
        } else{
            return enviarDadoOriginal;
        }
    }


    function checkRequiredFieldsExist(listaAtributos, campo, nElementsRemoved, value){
        var isOk = false;
        for(i = 0; i < listaAtributos.length; i++){
            if(listaAtributos[i].name == campo){
                isOk = true;
                break;
            }
        }
        var length = listaAtributos.length;

        if(!isOk){
            output.attributeList.attribute[length].name   = campo;
            output.attributeList.attribute[length].value  = value;

            if(campo != "codMaterial"){
                output.attributeList.attribute[length].action = equipAction;
                output.attributeList.attribute[length].type   = "EQUP";
            }

        }

    }
  ]]></script>
</script>
